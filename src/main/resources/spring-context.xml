<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd">
	<!-- Root Context: defines shared resources visible to all other web components -->

	<!--
		CSRF protection. Here we only include the CsrfFilter instead of all of Spring Security.
		See http://docs.spring.io/spring-security/site/docs/3.2.x/reference/htmlsingle/#csrf for more information on
		Spring Security's CSRF protection
	
	<bean id="csrfFilter" class="org.springframework.security.web.csrf.CsrfFilter">
		<constructor-arg>
			<bean class="org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository"/>
		</constructor-arg>
	</bean>
	-->
	<!--
		Provides automatic CSRF token inclusion when using Spring MVC Form tags or Thymeleaf. See
		http://localhost:8080/#forms and form.jsp for examples
	
	<bean id="requestDataValueProcessor" class="org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor"/>
	-->
	<!-- database -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	    <property name="ignoreUnresolvablePlaceholders" value="true" />  
		<property name="locations">
		<list>
		    <value>classpath:database.properties</value>
		</list>
		</property>
	</bean>
	
	<!-- 扫描包 -->
    <context:component-scan base-package="com.name.project" />
	
	
	<!-- 数据库 DataSource -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${db.driver}" />
		<property name="jdbcUrl" value="${db.url}" />
		<property name="user" value="${db.username}" />
		<property name="password" value="${db.password}" />
		<!--当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException,如设为0则无限期等待。单位毫秒。Default: 0 --> 
		<property name="checkoutTimeout" value="15000" />
		<!--初始化时获取10个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 --> 
		<property name="initialPoolSize" value="${db.init.poolsize}" />
		<property name="minPoolSize" value="${db.min.poolsize}" />
		<!--连接池中保留的最大连接数。Default: 15 --> 
		<property name="maxPoolSize" value="${db.max.poolsize}" />
		<!--最大空闲时间,120秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 --> 
		<property name="maxIdleTime" value="120" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 --> 
		<property name="acquireIncrement" value="${db.acquire.increment}" />
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0--> 
		<property name="maxStatements" value="0" />
		<!--每300秒检查所有连接池中的空闲连接。Default: 0-->
		<property name="idleConnectionTestPeriod" value="120" />
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 --> 
		<property name="acquireRetryAttempts" value="30" />
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。Default: false--> 
		<property name="breakAfterAcquireFailure" value="false" />
		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable等方法来提升连接测试的性能。Default: false --> 
		<property name="testConnectionOnCheckout" value="false" />
	</bean>
	
		
	

	<!-- 开启AOP监听 只对当前配置文件有效 -->
	<aop:aspectj-autoproxy expose-proxy="true"/>
    
    <bean id="jdbcTemplate"   class="org.springframework.jdbc.core.JdbcTemplate">  
         <property name="dataSource" ref="dataSource" />  
    </bean> 
   
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.generate_statistics">false</prop><!-- 用于指定Hibernate是否收集有助于性能调节的统计数据 -->
				<prop key="hibernate.use_sql_comments">false</prop><!-- 用于指定是否在SQL语句中输出便于调试的注释信息 -->
				<prop key="javax.persistence.validation.mode">none</prop>
				
				
			</props>
		</property>
		<property name="packagesToScan">
			<list>
				<value>com.name.project</value>
			</list>
		</property>
	</bean>
	
	<!--  --><bean id="exceptionHandler" class="com.name.project.common.exception.MyExceptionHandler"/>
	
	<!-- 开启注解事务 只对当前配置文件有效 -->
  	<tx:annotation-driven transaction-manager="txManager"/>
  	
	<bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="create*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="merge*" propagation="REQUIRED" />
            <tx:method name="del*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="put*" propagation="REQUIRED" />
            <tx:method name="use*" propagation="REQUIRED"/>
            <!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到-->
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />
            <tx:method name="count*" propagation="REQUIRED" read-only="true" />
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />
            <tx:method name="list*" propagation="REQUIRED" read-only="true" />
            <tx:method name="*" read-only="true" />
        </tx:attributes>
    </tx:advice>
    <aop:config expose-proxy="true">
        <!-- 只对业务逻辑层实施事务 -->
        <aop:pointcut id="txPointcut" expression="execution(* com.name.project..service..*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>
	<!-- 定时任务 -->
    
</beans>
